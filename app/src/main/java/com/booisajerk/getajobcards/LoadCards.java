package com.booisajerk.getajobcards;

import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.support.annotation.Nullable;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;

/**
 * Created by jenniferparker on 11/5/17.
 */

public class LoadCards extends AppCompatActivity {

    private static final String LOG_TAG = LoadCards.class.getSimpleName();

    private static int TIME_OUT = 4000;

    AppDatabase db;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.loading_cards);
        db = AppDatabase.getInMemoryDatabase(getApplicationContext());
        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                Intent intent = new Intent(LoadCards.this, MainActivity.class);
                startActivity(intent);
            }
        }, TIME_OUT);
    }

    @Override
    protected void onStart() {
        super.onStart();

        Log.d(LOG_TAG, "Deleting all existing questions");
        db.cardModel().deleteAll();

        Log.d(LOG_TAG, "Adding  questions to db");
        addCard(db," If your app needs to read the external storage (but not write to it), then you will need to declare the ___________ permission. ","READ_EXTERNAL_STORAGE","Android","https:///developer.android.com//training//basics//data-storage//files.html");
        addCard(db," True or False: You can define an interface in the Fragment class and implement it within the Activity.","TRUE","Android","https://developer.android.com/training/basics/fragments/communicating.html");
        addCard(db," When your LoaderCallbacks receives a callback to onLoadFinished(), you update your ______  with the new Cursor .","Adapter","Android","");
        addCard(db,"________ storage is best when you want to be sure that neither the user nor other apps can access your files.","Internal","Android","https://developer.android.com/training/basics/data-storage/files.html");
        addCard(db,"_________ storage is the best place for files that don't require access restrictions and for files that you want to share with other apps or allow the user to access with a computer.","External","Android","https://developer.android.com/training/basics/data-storage/files.html");
        addCard(db,"A host activity can capture a fragment instance by calling ____________.","findFragmentById();","Android","https://developer.android.com/training/basics/fragments/communicating.html");
        addCard(db,"An activity can be embedded inside of another activity with a(an) ___________.","ActivityGroup","Android","");
        addCard(db,"Describe the activity lifecycle","","Android","");
        addCard(db,"Describe the fragment activity lifecycle","","Android","");
        addCard(db,"During which fragment lifecycle method does a fragment capture an interface?","onAttach();","Android","https://developer.android.com/training/basics/fragments/communicating.html");
        addCard(db,"For fragments, when shoudl the layout be created? ","onCreateView();","Android","");
        addCard(db,"If you have a relatively small collection of key-values that you'd like to save, you should use ____________.","SharedPreferences","Android","https://developer.android.com/training/basics/data-storage/shared-preferences.html");
        addCard(db,"In most cases an AsyncTask is the preferred way to perform simple background operations.","False: IntentService is preferred","Android","");
        addCard(db,"Is a fragment required to be part of an activity layout?","No, a fragment can also be an invisible worker without a UI","Android","");
        addCard(db,"Name all of the fragment lifecycle events","onAttach(), onCreate(), onCreateView(), onActivityCreated(), onStart(), onResume(), onPause(), onStop(), onDestroyView(), onDestroy(), onDetach()","Android","");
        addCard(db,"Save information about the app state during _________  so progress is not lost.","onPause();","Android","https://developer.android.com/training/basics/data-storage/index.html");
        addCard(db,"So as long as you use __________ for your files on the internal storage, they are never accessible to other apps","MODE_PRIVATE","Android","");
        addCard(db,"The _________ tag helps eliminate redundant view groups in your view hierarchy when including one layout within another.","<merge />","Android","");
        addCard(db,"The Android SDK tools include a tool called _________ that allows you to analyze your layout while your application is running.","Hierarchy Viewer","Android","");
        addCard(db,"To add, remove, or replace a fragment, use ___________.","FragmentTransaction","Android","");
        addCard(db,"To efficiently re-use complete layouts, you can use the ________ and ______ tags to embed another layout inside the current layout.","<include/>, <merge/>","Android","");
        addCard(db,"To get fragments from the backstack, you need to override ___________.","onBackPressed();","Android","");
        addCard(db,"To write to a shared preferences file, create a ____________________.","SharedPreferences.Editor","Android","https://developer.android.com/training/basics/data-storage/shared-preferences.html");
        addCard(db,"To write to the external storage, you must request the _____________ permission in your manifest.","WRITE_EXTERNAL_STORAGE","Android","https://developer.android.com/training/basics/data-storage/files.html");
        addCard(db,"True of False:  Apps are installed onto the internal storage by default.","TRUE","Android","https://developer.android.com/training/basics/data-storage/files.html");
        addCard(db,"True or False:  IntentService isn't affected by most user interface lifecycle events, so it continues to run in circumstances that would shut down an AsyncTask","TRUE","Android","https://developer.android.com/training/run-background-service/create-service.html");
        addCard(db,"True or False: a fragment doesn't have to reside within an activity.","FALSE, it does.","Android","");
        addCard(db,"True or False: A SharedPreferences file is always shared, never private.","FALSE. They can be shared or private.","Android","https://developer.android.com/training/basics/data-storage/shared-preferences.html");
        addCard(db,"True or False: An operation running on an IntentService can't be interrupted.","TRUE","Android","");
        addCard(db,"True or False: if your app uses the WRITE_EXTERNAL_STORAGE permission, then it implicitly has permission to read the external storage as well.","TRUE","Android","");
        addCard(db,"Typically you want to implement at least which three fragment lifecycle methods?","onCreate(), onCreateView, onPause()","Android","");
        addCard(db,"Using a CursorLoader is the standard way to query a Cursor as an ____________  in order to avoid blocking your app's main thread with the query","asynchronous task","Android","");
        addCard(db,"What are the three states that an activity or fragment can be in? ","Resumed, Paused, Stopped","Android","Resumed - fragment is visible in the running activity. Paused - Another activity is in the foreground and has focus, but the activity in which this fragment lives is still visible (the foreground activity is partially transparent or doesn't cover the entire screen). Stopped - The fragment is not visible. Either the host activity has been stopped or the fragment has been removed from the activity but added to the back stack. A stopped fragment is still alive (all state and member information is retained by the system). However, it is no longer visible to the user and will be killed if the activity is killed.");
        addCard(db,"What are two ways you can insert a fragment into your activity layout?","1)Declare the fragment in the activity's layout file, as <fragment>. 2) From app code by adding it to an existing ViewGroup.","Android","");
        addCard(db,"What are ViewPagers used for?","","Android","");
        addCard(db,"What do BroadcastReceivers do?","","Android","");
        addCard(db,"What does iDE stand for? ","Integrated Development Environment","Android","");
        addCard(db,"What helper class should you use to make a sql db?","SqlLiteOpenHelper","Android","https://developer.android.com/training/basics/data-storage/databases.html");
        addCard(db,"What is a fragment?","A representation of a behavior or a portion of ui. A modular section of an activity. ","Android","");
        addCard(db,"What is an intent filter?","","Android","");
        addCard(db,"What is better, LinearLayout or RelativeLayout?","","Android","");
        addCard(db,"What is ConstraintLayout?","","Android","");
        addCard(db,"What is IntentService used for?","","Android","");
        addCard(db,"What is the difference between explicit and implicit intents?","An Intent can be explicit in order to start a specific component (a specific Activity instance) or implicit in order to start any component that can handle the intended action (such as \"capture a photo\").","Android","https://developer.android.com/training/basics/intents/index.html");
        addCard(db,"What should you use to open an activity fron within another activity","Intents","Android","Intent intent = new Intent(current class, class to be opened); startActivity(intent);");
        addCard(db,"What's the difference between Preference and SharedPreferences?","","Android","https://developer.android.com/training/basics/data-storage/shared-preferences.html");
        addCard(db,"What's the difference between the merge and include tags","","Android","");
        addCard(db,"When do you put code in onSaveInstanceState?","","Android","");
        addCard(db,"When should you use RelativeLayout?","","Android","");
        addCard(db,"When you add a fragment as part of an activity layout, it lives in a (an) ___________.","ViewGroup","Android","");
        addCard(db,"When you remove layers from a layout, you're ________ it.","flattening","Android","");
        addCard(db,"Which layout structure is better for performance:  shallow and wide or narrow and deep?","Shallow and wide.","Android","");
        addCard(db,"Why use fragments? ","1) Reusable, 2) Has own lifecycle seperate from that of activity, 3) Flexibility to change ui layout combinations for different screen sizes","Android","");
        addCard(db,"You can allow a Fragment to communicate up to its Activity by defining (an) ___________ in the Fragment class and implement it within the Activity.","interface","Android","https://developer.android.com/training/basics/fragments/communicating.html");
        addCard(db,"You can use a  ______________ to defer complex, rarely used views from being loaded.","ViewStub","Android","");
        addCard(db,"The Cursor starts at position number ___ .","-1","Android","This means that calling moveToNext() places the read position on the first entry in the results.");
        addCard(db,"True or False: It is bad practice to use a static factory method to instantiate your fragment?","FALSE","Android","http://www.androiddesignpatterns.com/2012/05/using-newinstance-to-instantiate.html");
        addCard(db,"What are the benefits of using a static factory method rather than a constructor to instantiate your fragment?","1.It is convenient 2. It enforces well-defined behavior","Android","http://www.androiddesignpatterns.com/2012/05/using-newinstance-to-instantiate.html");
        addCard(db,"CSS goes within <________>. ","style","CSS","");
        addCard(db,"If you want to use CSS so you need to add type? ","Yes","CSS","type=/\"text/css/\" ");
        addCard(db,"What is CSS short for? ","Cascading Style Sheet ","CSS","");
        addCard(db,"One of the main principles of SQL databases is the _______: a formal declaration of how the database is organized.","schema","Database","https://developer.android.com/training/basics/data-storage/databases.html");
        addCard(db,"To specify the layout of your schema, you can create a companion class, called a ______ class.","contract. A contract class is a container for constants that define names for URIs, tables, and columns.","Database","https://developer.android.com/training/basics/data-storage/databases.html  A contract class is a container for constants that define names for URIs, tables, and columns.");
        addCard(db,"Implement the ________ interface so your inner class can inherit a primary key field called _ID, which some Android classes such as cursor adaptors will expect it to have.","BaseColumns","Database","https://developer.android.com/training/basics/data-storage/databases.html");
        addCard(db,"Consider using _______ rather than constructors. ","static factory methods","Effective Java","SFM is a static method that returns an instance of a class.");
        addCard(db,"What are some advantages of static factory methods over constructors? ","1. They have names 2. Not limited to one per signature. 3. Don't have to create a new object each time they're invoked. 4. Can return an object of the return type of any subtype of that type 5. Can use type inference","Effective Java","");
        addCard(db,"What are some disadvantages fof static factory methods (vs constructors)","1. Classes without public or protected constructors can't be subclassed 2. They aren't easily distinguishable from other static methods ","Effective Java","");
        addCard(db,"True or False: You can use constructors or static factory methods or both. ","TRUE","Effective Java","");
        addCard(db,"What are some common naming conventions used by static factory methods? ","getInstance(), valueOf(), of(), newInstance(), getType(), newType()","Effective Java","");
        addCard(db,"You can use an _____ ______ to insert characters that would not normally be permitted into strings. ","escape sequences","General","");
        addCard(db,"How is a switch statement different than an if then statement? ","In a switch statement, an expression is compared for equality against all possible cases (until a disruptive statement is encountered. In an if/else statement, the expression, if determined to be true, will only complete the code within the if statement and then break.   ","General","");
        addCard(db,"What happens if there is no matching case clause in a switch statement?","The default case is executed. ","General","");
        addCard(db,"Always be sure to add ______ for each case clause in a switch statement so you can avoid code executing and then moving to the next case. ","break();","General","");
        addCard(db,"In a switch statement, is a default statement required?  ","No, it is optional. ","General","");
        addCard(db,"The while statement is a simple loop that will continue until .....when?","It will continue until the expression is false. ","General","");
        addCard(db,"What are the three optional clauses in a while statement?","initialization, condition, increment","General","");
        addCard(db,"In a while statement, if the condition is omitted, a condition of _____ is assumed. ","TRUE","General","If the condition is false, the loop breaks, so it would be silly to start out with a condition of false.");
        addCard(db,"How is the 'do' statement different than 'whlle'?","In 'do' the expression is tested after the block is executed rather than before. ","General","This means the block will always execute at least once.");
        addCard(db,"What is reflection? ","","General","");
        addCard(db,"How is inheritance different between Java and JavaScript?","Java - objects are instances of classes and classes can inherit from other classes.  JavaScript - objects inherit directly from other objects. ","General","");
        addCard(db,"_________ is a combination of values, variables, and operators, which computes to a value.","Expression","General","");
        addCard(db,"; sepatates ________ . ","statements","General","");
        addCard(db,"The keyword ____  jumps out of a loop and starts at the top","continue","General","");
        addCard(db,"The keyword ______ marks a block of statements to be executed, as long as a condition is true","for","General","");
        addCard(db,"The keyword _____ exits a function.","return","General","");
        addCard(db,"Define a method. ","An action that can be performed on an object","General","");
        addCard(db,"What is type safety? ","","General ","");
        addCard(db,"Create links using the <__>element. ","a","HTML","<a> href =\"elixir.html\">elixirs </a>");
        addCard(db,"The top level folder is referred to as the _____ folder. ","root","HTML","");
        addCard(db,"To navigate up one folder  use____. ",".. /","HTML","");
        addCard(db,"True or false : The browser typically only inserts breaks in your content when you start a new block element. ","True ","HTML","To insert one in other cases, use <br>");
        addCard(db,"Give some examples of block elements. ","Block quote, please, h1","HTML","");
        addCard(db,"___________ elements don't have any HTML content by design. ","Empty ","HTML","Examples are: <br> <img>");
        addCard(db,"True or false : When adding the meta tag, put it below all other elements in the head. ","False. It should be the first thing in the head. ","HTML","");
        addCard(db,"What is the runner technique (LinkedList problems)?","","Interview Problems","");
        addCard(db,"What does this do? : return b ? Boolean.TRUE : Boolean.FALSE;","","Java","");
        addCard(db,"What are some common static factory methods?","Toast, ObjectAnimator","Java","");
        addCard(db,"_______ equality refers to two references to one object on the heap.","Reference","Java  ","");
        addCard(db,"_______ is to a thread what a job is to a worker. ","Runnable ","Java  ","");
        addCard(db,"________ equality refers to two references to two objects on the heap, but the objects are meaningfully equivalent.","Object","Java  ","");
        addCard(db,"________ is a dynamically resizing array which  grows as you insert elements. ","ArrayList","Java  ","");
        addCard(db,"_________ converts from primitives to wrapper objects automatically.","autoboxing","Java  ","https://docs.oracle.com/javase/tutorial/java/data/autoboxing.html");
        addCard(db,"A checked exception is, more sppecifically, a _________ checked exception. ","compiler","Java  ","");
        addCard(db,"A file that holds flattened objects is ________. ","serialized","Java  ","");
        addCard(db,"A final class means you can't ______ the class.","extend","Java  ","");
        addCard(db,"A final method means you can't _____ the method. ","override","Java  ","");
        addCard(db,"A final variable means you can't ______ its value.","change","Java  ","");
        addCard(db,"A final variable must be initialized in one of two places. What are they?","1) At the time you declare it. 2) In a static initializer","Java  ","");
        addCard(db,"A Java class that can pass more than one is-a tests, is ____________.","polymorphic","Java  ","");
        addCard(db,"A thread's job is an instance of something that implements _________.","the runnable interface","Java  ","");
        addCard(db,"A vector is similar to a (an) _______ except it is synchronized. ","ArrayList","Java  ","");
        addCard(db,"All static variables in a class are initialized before any ____ of the class can be created. ","objects","Java  ","");
        addCard(db,"An abstract class can't be _______.","instantiated","Java  ","");
        addCard(db,"An abstract method has no _______.","body","Java  ","ex: public abstract void eat();");
        addCard(db,"An abstract method must be _______ to be used. ","overridden","Java  ","");
        addCard(db,"An instance variable lives as long as the ________ does. ","Object","Java  ","");
        addCard(db,"An interface is a 100% ________ class. ","abstract","Java  ","");
        addCard(db,"Any class that doesn't explicityly extend another class, implicitly extends class _________.","Object","Java  ","");
        addCard(db,"Area of memory where local varialbes and method invocations live.","stack","Java  ","");
        addCard(db,"By creating a new ______ object, you create a new call stack.","Thread","Java  ","");
        addCard(db,"Can a final class be subclassed? ","","Java  ","");
        addCard(db,"Can a non-static method access a static variable?","Yes, it can access a static method too.","Java  ","");
        addCard(db,"Can a static method access a non-static variable?","No","Java  ","");
        addCard(db,"Can I mark just one mothod in my class final if I don't want it to be overridden?","Yes","Java  ","");
        addCard(db,"Can static and non-static methods be combined together in one class?","Yes, but even a single non-static method means there needs to be a way to make an instance of the class. ","Java  ","");
        addCard(db,"Can the final keyword be used to modify non-static variables?","Yes","Java  ","");
        addCard(db,"Can you put code between try and catch?","No","Java  ","");
        addCard(db,"Can you use an inner class in an outer class from a different inheritance tree?","Yes, with an interface. ","Java  ","");
        addCard(db,"Compiler determines which methods you can call based on the ______, not the ______. ","reference, object","Java  ","");
        addCard(db,"An Intent can be explicit in order to start a specific component (a specific Activity instance) or implicit in order to start any component that can handle the intended action (such as /\"capture a photo/\").","int numSix = Integer.parseInt(/\"6/\");","Java  ","");
        addCard(db,"Create a (an) _______ when you want to define a template for a group of subclasses.","Abstract class","Java  ","");
        addCard(db,"Create a (an) ________ when you want to define a role that other clsses can play regardless of tree position. ","interface","Java  ","");
        addCard(db,"Do abstract classes have constructors?","Yes","Java  ","");
        addCard(db,"Do static variables get serialized?","No, static means one per class, not one per object. It will be saved with the variables current value. ","Java  ","");
        addCard(db,"Does a subclass have to override a superclass?","No, if the subclass doesn't require anything unique, it can just use the superclass members as they are. ","Java  ","");
        addCard(db,"Does the finally block get executed if we put a return in the try block?","Yes, finally block is run.","Java  ","");
        addCard(db,"Does this work? Animal a = new Dog(); a.bark();","No. Compiler uses reference type, not object type. Do this instead: Animal a = new Dog(); Dog d = (Dog) a; d.bark;","Java  ","");
        addCard(db,"For efficiency, chain FileWriter to _______. ","BufferedWriter","Java  ","");
        addCard(db,"Foundations of object oriented programming","1) Encapsulation, 2) Inheritance ,3) Polymorphism, 4) Abstraction ","Java  ","");
        addCard(db,"Give an example of methods that are typically static. ","Utility methods.","Java  ","");
        addCard(db,"HashMap needs how many type parameters?","2 (key, value)","Java  ","");
        addCard(db,"HashMap uses _____ instead of add().","put();","Java  ","");
        addCard(db,"Having more than one constructor in a clas means you have ______ constructors. ","overloaded","Java  ","");
        addCard(db,"How can you recognize a wrapper class?","Each is named after the primitive type, but with the first letter in CAPS. ","Java  ","");
        addCard(db,"How do you access a static variable?","Using the class name: Player.playerCount","Java  ","");
        addCard(db,"How do you call a static method?","Using the class name: Math.min(x,y);","Java  ","");
        addCard(db,"How do you create a new thread?","Thread t = new Thread(); t.start();","Java  ","");
        addCard(db,"How do you designate a variable as a constant?","public static final (also, name should be in all CAPS)","Java  ","");
        addCard(db,"How do you duck an exception?","declare it","Java  ","");
        addCard(db,"How do you invoke an abstract class (like Calendar)?","Calendar cal = Calendar.getInstance();","Java  ","");
        addCard(db,"How do you make your object thread-safe?","Decide which statements should be treates as oen atomic process. Use the synchronized keyword for those. ","Java  ","");
        addCard(db,"How is an ArrayList sorted?","Items are sorted in the order they were inserted.","Java  ","");
        addCard(db,"How many inner classes can a class have?","As many as it wants. ","Java  ","");
        addCard(db,"How to see the difference between the method and a constructor. ","A method has a return type, a constructor doesn't.","Java  ","");
        addCard(db,"How would you implement a method more than once in a class?","Using inner classes.","Java  ","");
        addCard(db,"If an object's reference dies, will an object die too?","Yes . ","Java  ","");
        addCard(db,"If you have a class with only static methods and you don't want the class to be instantiated, what should you do?","mark the constructor private","Java  ","");
        addCard(db,"If you have multiple catch blocks, order them from _______ to _______. ","smallest, largest","Java  ","");
        addCard(db,"If you make a constructor with arguments, will the compiler make a no arg constructor?","No, compiler will only add a constructor if you don't add any at all.","Java  ","");
        addCard(db,"If you override equals(), you must override hashCode().","TRUE","Java  ","");
        addCard(db,"If you pass a ______ to the sort() method, the sort order is determined by the comparator, not the element's compareTo() method. ","comparator","Java  ","");
        addCard(db,"If you use the dot operator on a  reference, you get a ________.","PointerException","Java  ","");
        addCard(db,"If your class might evolve, add a ______ to the class. ","serial version id","Java  ","");
        addCard(db,"Implementing an abstract method is just like ______ a method.","overriding","Java  ","");
        addCard(db,"In Collections, use _____ when finding something by key matters. ","map","Java  ","");
        addCard(db,"In Collections, use _______ when sequence matters. ","list","Java  ","");
        addCard(db,"In Collections, use _______ when uniqueness matters.","set","Java  ","");
        addCard(db,"In terms of inheritance, what's the effect of keeping a constructor private? ","The class can be inherited, but only by its own or its parents inner classes. ","Java  ","");
        addCard(db,"Instance variables live on the _______. Local variables live on the ______. ","heap, stack","Java  ","");
        addCard(db,"Instance variables live within the object they belong to, on the ______.","heap","Java  ","");
        addCard(db,"List 3 things that can prevent a class from being subclassed.","1) Non-public class, 2) Final keyword modifier, 3) Class has only private constructors.","Java  ","");
        addCard(db,"List four classes that implement Map.","HashTable, HashMap, LinkedHashMap, TreeMap (via SortedMap)","Java  ","");
        addCard(db,"List the primitive data types.","boolean, int, float, short, byte, long, char, double ","Java  ","");
        addCard(db,"List these primitive data types in order from smallest to largest; long, byte, int, short","byte (8), short(16), int(32), long(64)","Java  ","");
        addCard(db,"List three classes that implement Collections list","ArrayList, LinkedList, Vector","Java  ","");
        addCard(db,"List three classes that implement Collections set.","HashSet, LinkedHashSet, TreeSet (via SortedSet)","Java  ","");
        addCard(db,"Make a ______ only when you need a more specific version of a class. ","Subclass","Java  ","");
        addCard(db,"Name three ways to get rid of an object's reference. ","1) Reference goes out of scope (method ends), 2) Reference is assigned to another object, 3) Reference is explicityly set to .","Java  ","");
        addCard(db,"Non-runtime exceptions are called ______ exceptions.","checked","Java  ","");
        addCard(db,"Objects have state and behavior, represented by ________ and _______.","instance variables, methods","Java  ","");
        addCard(db,"Once a thread becomes runnable, it can move among 3 states. What are they?","Runnable, running, blocked","Java  ","");
        addCard(db,"public static final double PI = 3.1415; Explain what this is.","public - any code can access it. static - don't need an instance of Math to run it. final - can't be changed. This is a constant.","Java  ","");
        addCard(db,"Static final variables are _________.","constants","Java  ","");
        addCard(db,"The ________ passed into the event handler method carries info about the event, including the source of the event. ","event object","Java  ","");
        addCard(db,"The 1st concrete class in a tree must implement ________ abstract methods. ","all","Java  ","");
        addCard(db,"The assignment operator is represented by what symbol?","/\"=/\"","Java  ","");
        addCard(db,"The constructor runs ____ the object reference is assigned. ","before","Java  ","");
        addCard(db,"The listener is where the ______ is declared. ","call-back method","Java  ","");
        addCard(db,"The most common generified type is_______. ","ArrayList","Java  ","");
        addCard(db,"The two times errors can be caught are _______ and _________.","Compile time and run time. ","Java  ","");
        addCard(db,"The way to invoke a _____ is with keyword /\"new/\" followed by the class name. ","constructor","Java  ","");
        addCard(db,"Think of a static variable as one that lives in a ________ rather than an object.","class","Java  ","");
        addCard(db,"Threads running on the same object can lead to ________ issues, which can lead to race conditions. ","concurrency","Java  ","");
        addCard(db,"To define an interface, replace \"interface\" for _________. ","class","Java  ","");
        addCard(db,"To listen for an event, you need to ________ your listener with the event source. ","register","Java  ","");
        addCard(db,"To serialzie an object, you call ______ on the ObjectOutputStream. ","writeObject(object);","Java  ","");
        addCard(db,"To treat a primitive like an object, you can _________. ","Wrap it","Java  ","test more dialog");
        addCard(db,"True or False: A final class is at the end of the inheritance line and can't be extended. ","TRUE","Java  ","");
        addCard(db,"True or False: A static method can be invoked without any instacne of the method's class on the heap.","TRUE","Java  ","");
        addCard(db,"True or False: A thread's job can be defined in any class that extends Runnable.","FALSE","Java  ","You can't extend Runnable. It must be implemented.");
        addCard(db,"True or False: A try must be followed by etither a catch or a finally.","TRUE","Java  ","");
        addCard(db,"True or False: Another good option beyond using a Runnable is just subclassing Thread.","False - it is an option, but not good design. Should only subclass if you need a more specific version of the thread. ","Java  ","");
        addCard(db,"True or False: Declaring a superclass of an exception allows you to throw subclass exceptions. ","True - for example, declaring the ClothingException let's you throw the PantsException, ShirtException.","Java  ","");
        addCard(db,"True or False: Each element in a map has either a key or a value","False, each element has both a key and a value. ","Java  ","");
        addCard(db,"True or False: Every class has a constructor.","TRUE","Java  ","");
        addCard(db,"True or False: For TreeSets, both of these meust be true: 1) elements must be a type implementing comparable. 2) you use TreeSet's overloaded constructor that takes a comparator.","False, only one of these must happen.","Java  ","");
        addCard(db,"True or False: If a class I need isn't serializable, I can subclass it and make *that* serializable.","TRUE","Java  ","");
        addCard(db,"True or False: If two objects are equal, they must have matching hashcodes.","TRUE","Java  ","");
        addCard(db,"True or False: If you do Thread.sleep(2000); after 2s your thread will return to running state.","False, it will be runnable, but it won't be running unless selected by the thread scheduler. ","Java  ","");
        addCard(db,"True or False: If you have a class that doesn't implement a comparable, you can still put things in order by creating a comparator. ","TRUE","Java  ","");
        addCard(db,"True or False: In Collections list, you can have more than one element reference the same object. ","TRUE","Java  ","");
        addCard(db,"True or False: In Collections set, you can have more than one element referencing the same object. ","FALSE","Java  ","");
        addCard(db,"True or False: Interfaces are always public.","TRUE","Java  ","");
        addCard(db,"True or False: LinkedLists don't provide constant access to a particular index. Need to iterate through \"k\" elements to find the kth element.","TRUE","Java  ","");
        addCard(db,"True or False: Method parameters are considered local variables. ","TRUE","Java  ","");
        addCard(db,"True or False: No other threads can enter any of the object's synchronized methods while a thread is holding the key.","TRUE","Java  ","");
        addCard(db,"True or False: Only one thread can have an active call stack at a given time. ","TRUE","Java  ","");
        addCard(db,"True or False: Only the constructor from the current class runs when you make a new object. ","False, all constructors in the inheritance tree run. ","Java  ","");
        addCard(db,"True or False: Runtime exceptions are checked by the compiler","False, these are unchecked exceptions. ","Java  ","");
        addCard(db,"True or False: Static method behavior isn't dependent on an instance variable.","TRUE","Java  ","");
        addCard(db,"True or False: Static methods don't use instance variables.","TRUE","Java  ","");
        addCard(db,"True or False: Static nested classes can only access other private static members of the outer class, not the non-static members.","TRUE","Java  ","");
        addCard(db,"True or False: There are ways to control the thread scheduler. ","False ","Java  ","");
        addCard(db,"True or False: There are ways to control the thread scheduler. ","FALSE","Java  ","");
        addCard(db,"True or False: Two objects with the same hashcode values aren;t required to be equal, but if they're equal, they must have the same hashcode value. ","TRUE","Java  ","");
        addCard(db,"True or False: Type parameters don't have to be defined in the class declaration. ","True, they can also be defined before the method return type. ","Java  ","");
        addCard(db,"True or False: Unlike instance variables, static variables don't get default values. ","False, they get the source default values. ","Java  ","");
        addCard(db,"True or False: When using Collections map, you can have two keys that reference the same value, but can't have duplicate keys. ","TRUE","Java  ","");
        addCard(db,"True or False: With a wildcard, you can invoke methods on the elements in the list, but you can't add elements to the list.","TRUE","Java  ","");
        addCard(db,"True or False: It is ok to have duplicate values and duplicate keys.","False, you can't have duplicate keys.","Java  ","");
        addCard(db,"True or False: You can use this(); to call a constructor from another overloaded constructor in a different class. ","False, same class. ","Java  ","");
        addCard(db,"True or False: You can't call a non-static method from a static method.","TRUE","Java  ","");
        addCard(db,"True or False: You can't have an abstract method in a concrete class. ","TRUE","Java  ","");
        addCard(db,"True or False: You can't have polymorphic arguments or return types. ","False, you can. ","Java  ","");
        addCard(db,"True or False: You can't implement more than one interface. ","False - You can extend only one class, but can implement multiple interfaces. ","Java  ","");
        addCard(db,"True or False: You must be careful using sleep(), it will cause an InterruptedException, an unchecked exception","False - it is a checked exception","Java  ","");
        addCard(db,"Two things you need to make a socket connection are _______ and _______. ","1) Who it is, 2) What port they're on","Java  ","");
        addCard(db,"Use _____ to see if two different objects are equal. ","equals()","Java  ","");
        addCard(db,"Use the _______ keyword to ensure that only one thread at a time can access a method. ","synchronized","Java  ","");
        addCard(db,"Use the keyword ______ to make your method associated with an exception. ","throws","Java  ","");
        addCard(db,"Use the String _____ method to separate parts of a string.","split();","Java  ","");
        addCard(db,"Variables must always be declared with a _______ and a _____.","name, type","Java  ","");
        addCard(db,"What are generics?","","Java  ","");
        addCard(db,"What are LinkedLists?","","Java  ","");
        addCard(db,"What are literals?","","Java  ","");
        addCard(db,"What are parameterized types? ","A way to force the compiler to only accept specific type of object. ","Java  ","Parameterized types are represented by <>");
        addCard(db,"What are primitives? ","","Java  ","");
        addCard(db,"What are some things that cause a thread to be blocked ?","*Sleeping *Waiting for another thread to finish *Waiting for stream data *Waiting for an object's  lock","Java  ","");
        addCard(db,"What are some benefits of inheritance?","1) Avoid duplicate code 2) Control - can define a common protocol for a group of classes","Java  ","");
        addCard(db,"What are the steps for deserialization?","1) Make FileInputStream, 2) Make ObjectInputStream, 3) Cast the objects, 4) Close the ObjectInputStream","Java  ","");
        addCard(db,"What are the steps to serialize an object to file?","1) Make FileOUtputStream, 2) Make ObjectOutputStream, 3) Write the object, 4) Close the ObjectOutputStream. ","Java  ","");
        addCard(db,"What are the three steps for making an object? ","1) Declare a reference variable 2) Create object 3) Assign object to the reference ","Java  ","");
        addCard(db,"What are the two types of variables?","primitive, reference","Java  ","");
        addCard(db,"What are the ways to deal with exceptions?","handle or declare them","Java  ","");
        addCard(db,"What are thread priorities? ","Numerical values that tell the thread scheduler how important a thread is to you. Note: can't depend on these 100% of the time. ","Java  ","");
        addCard(db,"What class do you need to write to a string? ","FileWriter","Java  ","");
        addCard(db,"What classes do you use to deserialize?","FlieInputStream and ObjectInputStream","Java  ","");
        addCard(db,"What command do you use to leave a loop early?","break;","Java  ","");
        addCard(db,"What does <> represent?","generics","Java  ","");
        addCard(db,"What does a BufferedWriter do?","It is like a shopping cart. It provides a temporary holding place and will have the FileWriter write only once it is full. ","Java  ","");
        addCard(db,"What does a getter do?","It sends back, as a return value, the value (usually of an instance variable)","Java  ","");
        addCard(db,"What does a listener do?","It listens for a call back. ","Java  ","");
        addCard(db,"What does atomic mean?","Making something indivisible. ex: you can make a method atomic by adding the synchronized keyword. ","Java  ","");
        addCard(db,"What does final mean when applied to a reference variable?","The variable can't point to any other object on the heap.","Java  ","");
        addCard(db,"What does marking an instance variable \"transient\" do? ","It says skip this variable during serialization.","Java  ","");
        addCard(db,"What does serializable mean?","Saveable thorugh the serialization mechanism","Java  ","");
        addCard(db,"What does the abstract keyword do for a class?","","Java  ","");
        addCard(db,"What does the abstract keyword do for a method?","","Java  ","");
        addCard(db,"What does the abstract keyword do for a variable?","","Java  ","");
        addCard(db,"What does the final keyword do for a class?","","Java  ","");
        addCard(db,"What does the final keyword do for a method?","","Java  ","");
        addCard(db,"What does the final keyword do for a variable?","","Java  ","");
        addCard(db,"What does the static keyword do for a class?","","Java  ","");
        addCard(db,"What does the static keyword do for a method?","","Java  ","");
        addCard(db,"What does the static keyword do for a variable?","","Java  ","");
        addCard(db,"What does the static keyword do?","Let's a method run witout an instance of the class","Java  ","");
        addCard(db,"What does the void keyword do for a method?","","Java  ","");
        addCard(db,"What does this do? add<EventType>Listener(); ?","Registers your listener","Java  ","");
        addCard(db,"What happens to transient variables when something is deserialzied?","They'll come back as a  or default primitive value. ","Java  ","");
        addCard(db,"What is a constructor?","A block of code run when you create a new instance of an object. Invoked using the \"new\" keyword. Has no return type.","Java  ","");
        addCard(db,"What is a static initializer?","A static block of code instide the class that runs only once, before the constructor.","Java  ","");
        addCard(db,"What is a static initializer?","A block of code that runs when a class is loaded, before the other code can use the class. ","Java  ","");
        addCard(db,"What is a stub?","","Java  ","");
        addCard(db,"What is abstraction?","","Java  ","");
        addCard(db,"What is an anonymous inner class?","","Java  ","");
        addCard(db,"What is deadlock?","When you have two threads, each holding the key that the other needs. ","Java  ","");
        addCard(db,"What is encapsulation?","","Java  ","");
        addCard(db,"What is object reflection?","","Java  ","");
        addCard(db,"What is one way to get a thread to stop running?","sleep();","Java  ","");
        addCard(db,"What is overloading for?","It allows two or more method to have the same name, but different argument lists. ","Java  ","");
        addCard(db,"What is overriding?","","Java  ","");
        addCard(db,"What is polymorphism?","","Java  ","");
        addCard(db,"What is the \"finally\" part of try{}catch{}finally{}?","Finally is the part gets run no matter what. ","Java  ","");
        addCard(db,"What is the difference between --x and x--?","Decrement before the line vs decrement after the line","Java  ","");
        addCard(db,"What is the difference between connection streams and chain streams?","","Java  ","");
        addCard(db,"What is the difference between serializing and writing to a text file. ","For writing to text: 1) you write a string instead of an object, 2) use FileWriter instead of FileOutputStream, 3) don't need to chain to ObjectOutputStream.","Java  ","");
        addCard(db,"What is the most common use of polymorphism?","When a parent class reference is used to refer to a child class object. ","Java  ","");
        addCard(db,"What is the oposite of abstract?","concrete","Java  ","");
        addCard(db,"What is the purpose of a listener? ","It is a way for the event source to call back with info. ","Java  ","");
        addCard(db,"What is this symbol for? ~","NOT operator - flips the bits","Java  ","");
        addCard(db,"What makes decisions re: what is running and when?","Thread scheduler","Java  ","");
        addCard(db,"What should you do if you need a seperate class, but want that class to behave like part of another class?","","Java  ","");
        addCard(db,"What should you do if you want your class to be serializable?","implements serializable","Java  ","");
        addCard(db,"What's a static inner class?","","Java  ","");
        addCard(db,"What's the difference between a singly or doubly linked list?","Single - each node points to the next node in the list. Double - each node has pointers to next and previous node.","Java  ","");
        addCard(db,"When a method shares the same name and function signature as another method in its super class, what is it doing?","overriding","Java  ","");
        addCard(db,"When a thread has finished running, its state changes to ________.","dead","Java  ","");
        addCard(db,"When do you use the final keyword for a method?","When you need to indicate that it can't be overridden.","Java  ","");
        addCard(db,"When multiple methods have the same name but differ in type or number of args, what practice is being utilized?","Overloading","Java  ","");
        addCard(db,"When should you use 'while' instead of 'for'?","when you don't know how many times to loop and just want to keep going until condition isn't true.  ","Java  ","");
        addCard(db,"When we say class \"members\", we mean _______ and _______.","instance variables, methods","Java  ","");
        addCard(db,"When would you make a static method?","When you don't need instance variables. In other words, the method behavior doesn't change with instance variable state. Math is an example.","Java  ","");
        addCard(db,"When you print a map, the key value pairs are printed in _______. {}  []  ()","{}","Java  ","");
        addCard(db,"When you put an object in an ArrayList<Object>, you must treat it as a (an)  _______ regardless of type before it was added. ","object","Java  ","");
        addCard(db,"When you run start(); on a thread, what is its state?","Runnable","Java  ","");
        addCard(db,"When you start a thread, a new stack is created with the runnable's run() method at the _______ of the stack.","bottom","Java  ","");
        addCard(db,"When you synchronize a static menthod, Java uses the lock of the class itself. ","TRUE","Java  ","");
        addCard(db,"Where are local variables declared? ","in the method","Java  ","");
        addCard(db,"Where should you put your event handling code?","In the listener callback method.","Java  ","");
        addCard(db,"Where, in Runnable, do you put the code for the job you want to do?","in public void run(){ }","Java  ","");
        addCard(db,"Why are inner classes convenient for event handlers? ","You can implement the same event handling method more than once. ","Java  ","");
        addCard(db,"Why do we need chaining? ","Often takes one to make the connection and antoehr to call method on. ","Java  ","");
        addCard(db,"Why not just synchronize all methods? ","It causes performance hit, can slow down your program (since it affects concurrency), and can lead to deadlock. ","Java  ","");
        addCard(db,"Will the finally block get executed if the vm exist during try/catch block?","No","Java  ","");
        addCard(db,"With overloading, to compileeach constructor must have a different _______.","argument list","Java  ","");
        addCard(db,"You should only make a class that doesn't extend anything (other than object) when your new class doesn't pass the _____ test. ","is a ","Java  ","");
        addCard(db,"You should wrap risky code in a ______.","try catch block","Java  ","");
        addCard(db,"Java supports four kinds of types. What are they?","Classes, Interfaces, Arrays, Primitives","Java  ","The first three are reference types and objects. Primitives are not.");
        addCard(db,"A class's members consist of what four things? ","Fields, Classes, Member Classes, Member Interfaces","Java  ","");
        addCard(db,"A method's signature cosists of ______ and _______. ","name, parameter type","Java  ","NOT return type");
        addCard(db,"Is Java statically or dynamically typed?","Static","Java . ","Variables are declared with type at compile time, and can only accept values permitted for that type.");
        addCard(db,"True or False: String are immutable","TRUE","JavaScript","Once they are created, they can't be changed.");
        addCard(db,"JavaScript is a ________ typed language.","loosely","JavaScript","The alternative is strongly typed. Java is an example of a strongly typed language.");
        addCard(db,"Functions are 1st class objects. What does this mean? ","A first class object can be dynamically created, destroyed, passed to a function, returned as a value, and have all the same rights as other variables. ","JavaScript","");
        addCard(db,"How many number types are there?","1","JavaScript","It is the same as Java's double, a 64 bit floating point.");
        addCard(db,"True or False: JavaScript is a lambda language","TRUE","JavaScript","");
        addCard(db,"JavaScript has object literal notation. What does this mean?","Objects are defined and created with simple key:value pairs","JavaScript","var person = {firstName:'John', lastName:'Doe', age:50, eyeColor:'blue'};");
        addCard(db,"True or False: JavaScript has a class-free object system.  ","TRUE","JavaScript","This means that object inherit properties directly from other objects.  ");
        addCard(db,"Since there is no character type, how do you represent a character? ","Make a string with just one character in it. ","JavaScript","");
        addCard(db,"What is a string literal?","A \"string literal\" is a sequence of characters from the source character set enclosed in double quotation marks (\" \").","JavaScript","");
        addCard(db,"Each ______ tag represents a compilation until that is compiled and then executed. ","<script>","JavaScript","");
        addCard(db,"When used inside of a function, the ____ statement defines the function's private variables. ","var","JavaScript","");
        addCard(db,"In HTML, JavaScript must be placed between the _______ tags. ","<script></script>","JavaScript","");
        addCard(db,"True or False: The type attribute <script type=\"text/javascript\"> may be included, but it is not required. ","TRUE","JavaScript","JavaScript is the default scripting language in HTML");
        addCard(db,"True or False: JavaScript can be placed in either the head or the body of HTML. ","True - it can also be placed in both. ","JavaScript","");
        addCard(db,"Can external (saved in a different file) scripts contain <script> tags? ","No. ","JavaScript","");
        addCard(db,"What are some advantages of putting scripts in external files? ","1) Seperates code from HTML, 2) Easier maintenance and readability of both code and HTML, 3) Cached scripts can speed up page load time","JavaScript","");
        addCard(db,"Write into an HTML element, using _______.","innerHTML","JavaScript","");
        addCard(db,"Write into the HTML output using __________.","document.write()","JavaScript","");
        addCard(db,"Write into an alert box, using ________.","window.alert()","JavaScript","");
        addCard(db,"Write into the browser console, using ________.","console.log()","JavaScript","");
        addCard(db,"True or False: Using document.write() after an HTML document is fully loaded, will delete all existing HTML.","TRUE","JavaScript","");
        addCard(db,"What is the difference between '=', '===', and '+='?","=' is an assignment operator, '===' is an equality operator, '+=\" adds or concatenates.","JavaScript","");
        addCard(db,"Fixed values are called ______, while variable values are called ______.","literals, variables","JavaScript","");
        addCard(db,"Use the 'var' keyword to _______ a variable.","declare","JavaScript","");
        addCard(db,"True or False: Hyphens are allowed symbols in names.","FALSE","JavaScript","Hyphen is reserved for subtraction. ");
        addCard(db,"Are semicolons required after each executable statement?","No","JavaScript","But they are highly recommended.");
        addCard(db,"Is JavaScript statically or dynamically typed?","Dynamic","JavaScript","");
        addCard(db,"True or False: You can't declare and assign a variable at the same time.","FALSE","JavaScript","var cheeseType = 'swiss'; // is totally valid");
        addCard(db,"Javascript is a prototypal insurance language. What does this mean? ","Objects can inherit properties directly from other objects.  The language is class free. ","JavaScript","The opposite of this is classical inheritance. ");
        addCard(db,"True or false : Use of the constructor functions is not recommended. ","TRUE","JavaScript","");
        addCard(db,"True or false : Javascript is a functional object oriented language. ","TRUE","JavaScript","");
        addCard(db,"True or false : Objects are class - free. ","TRUE","JavaScript","");
        addCard(db,"What is an object literal? ","A pair of curley braces surrounding zero or more name/value pairs","JavaScript","");
        addCard(db,"The value _______ is created of an attempt is made to retrieve a non-existent member. ","Undefined","JavaScript","");
        addCard(db,"The apply method takes ____ parameters. ","2","JavaScript","The first is the value to bind to this. The second is an array of parameters.");
        addCard(db,"The_______ statement can be used to cause the statement to retirement early. ","Return ","JavaScript","");
        addCard(db,"If return is called and the return value is not specified, what value will be returned. ","Undefined ","JavaScript","");
        addCard(db,"True or false: Objects are immutable keyed collections. ","FALSE","JavaScript","They are mutable keyed collections");
        addCard(db,"Every object is linked to a ________ _______  from which it can inherit properties. ","prototype object ","JavaScript","");
        addCard(db,"If a desired exists nowhere in the prototype chain, the result is an undefined value. This is an example of ______. ","delegation ","JavaScript","");
        addCard(db,"Which operator can be used to determine the type of a property. ","typeof ","JavaScript","");
        addCard(db,"True or false : The prototype link is used only for retrieval. ","TRUE","JavaScript","");
        addCard(db,"The prototype relationship is dynamic. what does this mean? ","If a new property is added to the prototype, we will if will be shown right away in all objects that are based on that prototype. ","JavaScript","");
        addCard(db,"True or false : Global variables are awesome and should be used extensively. ","False ","JavaScript","They weaken the resiliency of programs and should be avoided ");
        addCard(db,"What is one way to minimize the use of global variables? ","Create a Single global variable for your application and use it like a container. ","JavaScript","");
        addCard(db,"________ are the fundamental modular unit of Javascript ","Functions ","JavaScript","");
        addCard(db,"Are functions objects? ","Yes ","JavaScript","");
        addCard(db,"What are objects? ","A collection of name value pairs with a hidden link to a prototype object ","JavaScript","");
        addCard(db,"If a function is not given a name it is_______. ","Anonymous ","JavaScript","");
        addCard(db,"True if false : a function literal can appear anywhere an expression can appear ","TRUE","JavaScript","");
        addCard(db,"Can functions be invoked? ","Yes ","JavaScript","");
        addCard(db,"The function object created by a function literal contains a link to the key context. What is this called? ","Closure","JavaScript","");
        addCard(db,"If we add a method to Object.prototype, which objects will that method be available to? ","All","JavaScript","This is called augmentation ");
        addCard(db,"A________ function is one that calls itself, either directly or indirectly. ","Recursive ","JavaScript","");
        addCard(db,"Does Javascript have tail recursion optimization? ","No ","JavaScript","Fiy-this is when the function returns the result of incoming itself recursively and then the invocation is replaced by a loop. This speeds things up. ");
        addCard(db,"Does Ja ascript have block scope like most other C languages? ","No ","JavaScript","It has function  scope ");
        addCard(db,"What is function scope?","Parameters and variables are only visible within the function ","JavaScript","This is what Javascript has ");
        addCard(db,"What is differential inheritance? ","Specifying the difference between a new and old object by customizing the new one. ","JavaScript","");
        addCard(db,"In a purely prototypal patter there are no ______. ","classes","JavaScript","");
        addCard(db,"A best practice is to not use \"new\" for constructors/Or is it to not use constructors at all?","","JavaScript","");
        addCard(db,"______ is when functions use objects to remember the results of previous operations. ","Memoization","JavaScript","");
        addCard(db,"What is is called when you combine a function and an argument to creat a new function?","Currying","JavaScript","");
        addCard(db,"In a ______ we can call many methods on the same object in a sequence of single statements. ","cascade","JavaScript","");
        addCard(db,"A _____ is a function or object that presents an interface but hides its state and implementation.","module","JavaScript","");
        addCard(db,"By using a _______ pattern, you can almost completely eliminate the use of global variables. ","module","JavaScript","");
        addCard(db,"True or False: It is a good practice to create functions within a loop.","FALSE","JavaScript","");
        addCard(db,"____ notation can be used to retrieve values if a string expression is a string literal, is a legal JavaScript name, and is not a reserved word.","dot (.)","JavaScript","");
        addCard(db,"What are the five simplest types?","numbers, strings, booleans, null, undefined","JavaScript","");
        addCard(db,"Do objects belong to a class?","No, objects are class free in JavaScript. ","JavaScript","");
        addCard(db,"Numbers, strings and booleans are immutable. What does this mean? ","","JavaScript","");
        addCard(db,"Use the _____  to assign a variable","equal sign","JavaScript","");
        addCard(db,"JavaScript ______ are instructions to be executed by the web browser.","statements","JavaScript","");
        addCard(db,"______ are containers for storing data values. ","varialbles","JavaScript","");
        addCard(db,"Variables must be itentified with unique names called _____. ","identifiers","JavaScript","");
        addCard(db,"Write into an HTML element, using __________.","innerHTML","JavaScript","");
        addCard(db,"Write into the HTML output using _______.","document.write()","JavaScript","");
        addCard(db,"Write into an alert box using _________.","window.alert()","JavaScript","");
        addCard(db,"Write into the browser console, using _________.","console.log()","JavaScript","");
        addCard(db,"In the following, what do \"a\" and \"href\" do? ","a=creates a link, href=link destination ","JavaScript","");
        addCard(db,"True or False: Objects are variables","True ","JavaScript","The can have many values");
        addCard(db,"Variable values are written as _______.","name:value pairs","JavaScript","");
        addCard(db,"Name:value pairs are called _______. ","properties","JavaScript","");
        addCard(db,"What is the syntax to access an object's method? ","objectName.methodName();","JavaScript","fullName : function() { return this.firstName + \" \" + this.lastName;}");
        addCard(db,"If you access the fullName method, without (), it will return the _________.","function definition","JavaScript","");
        addCard(db,"When a variable is declared with the keyword \"new\", the variable is created as ______.","an object ","JavaScript","Avoid String, Number, and Boolean objects. They complicate your code and slow down execution speed.");
        addCard(db,"True or false : Global variables are evil. ","True ","Javascript ","Just read  Java :the good parts ");
        addCard(db,"JS is a loosely typed language. It never______. ","casts","Javascript ","");
        addCard(db,"What's a foreign key?","a foreign key is a key in one table that references a primry key in another table.","sql","");
        addCard(db,"A flexible view for providing a limited window into a large data set.","RecyclerView","","");
        addCard(db,"What are the two ways that you can access a property? ","objectName.propertyName or objectName[\"propertyName\"]","","");
        addCard(db,"What's the difference between ListView and RecyclerView?","","","");

        db.cardModel().updateCards();
        Log.d(LOG_TAG, "Updating cards.");
        Log.d(LOG_TAG, "Card count = " + db.cardModel().countAllCards());


    }

    private static Card addCard(final AppDatabase db, final String question, final String answer
            , final String category, final String more) {
        Card card = new Card();
        card.setQuestion(question);
        card.setAnswer(answer);
        card.setCategory(category);
        card.setMore(more);
        db.cardModel().insertCard(card);
        return card;
    }
}
